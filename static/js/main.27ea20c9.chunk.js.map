{"version":3,"sources":["Toastify/Toastify.tsx","_data/colors.js","Settings/Colorpicker.tsx","_data/data.ts","Settings/Settings.tsx","Dockbar/Dockbar.tsx","Searchbar/Searchbar.tsx","App.tsx","serviceWorker.js","index.js","_data/pic.png"],"names":["Toastify","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","limit","toastAction","msg","toast","dismiss","dark","progress","undefined","c","getColors","console","log","material","result","forEach","color","push","Settings","props","useState","displayColorPicker","setDisplayColorPicker","var","className","onClick","colors","onChange","handleColorChange","rgb","r","g","b","a","weblinks","url","icon","searchEngines","label","showSettings","setShowSettings","currSearchEngine","setCurrSearchEngine","useEffect","lsEngine","localStorage","getItem","engines","engine","type","value","checked","e","currentTarget","setItem","fas","Colorpicker","icons","weblink","href","fab","SearchBar","inputRef","placeholder","ref","onKeyPress","which","encodeURIComponent","window","location","replace","redirectToSearch","autoFocus","defaultColors","App","Date","time","setTime","setInterval","root","document","documentElement","Object","keys","key","style","setProperty","src","Pic","alt","Dockbar","toLocaleTimeString","slice","Searchbar","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.27ea20c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport function Toastify(){\r\n    return(\r\n        <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss={false}\r\n            draggable={false}\r\n            pauseOnHover={false}\r\n            limit={2}\r\n        />\r\n    )\r\n}\r\n\r\nexport function toastAction (msg:string) {\r\n    toast.dismiss();\r\n    toast.dark(msg, {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        progress: undefined,\r\n    });\r\n}","import * as material from 'material-colors'\r\n\r\nconst c = [\r\n    \"blueGrey\",\r\n    \"red\",\r\n    \"pink\",\r\n    \"purple\",\r\n    \"deepPurple\",\r\n    \"indigo\",\r\n    \"blue\",\r\n    \"lightBlue\",\r\n    \"cyan\",\r\n    \"teal\",\r\n    \"green\",\r\n    \"lightGreen\",\r\n    \"lime\",\r\n    \"yellow\",\r\n    \"amber\",\r\n    \"orange\",\r\n    \"deepOrange\",\r\n    \"brown\"\r\n]\r\nexport function getColors() {\r\n    console.log(material)\r\n    var result = [[\r\n        \"rgba(46,46,46,1)\",\r\n        \"rgba(230,230,230,1)\",\r\n        \"rgba(50,200,150,.3)\",\r\n        \"rgba(200,50,50,.3)\"\r\n    ],[\r\n        \"rgba(0,0,0,1)\",\r\n        \"rgba(60,60,60,1)\",\r\n        \"rgba(120,120,120,1)\",\r\n        \"rgba(180,180,180,1)\",\r\n        \"rgba(250,250,250,1)\"\r\n    ]]\r\n    c.forEach((color)=>{\r\n        result.push([\r\n            material[color][900],\r\n            material[color][700],\r\n            material[color][500],\r\n            material[color][300],\r\n            material[color][100]\r\n        ])\r\n    })\r\n\r\n    return result\r\n}","import React, {useState} from 'react';\r\nimport { SwatchesPicker } from 'react-color';\r\nimport {getColors} from \"../_data/colors\"\r\n\r\ntype props = {\r\n    handleColorChange: (key: string, color: string) => void,\r\n    var:string,\r\n}\r\n\r\nexport function Settings(props:props){\r\n    const [displayColorPicker, setDisplayColorPicker]:boolean | any = useState(false)\r\n    \r\n    var handleClick = () => {\r\n        setDisplayColorPicker(!displayColorPicker)\r\n    }\r\n    var handleClose = () => {\r\n        setDisplayColorPicker(false)\r\n    }\r\n    var handleChange = (c:any) => {\r\n        props.handleColorChange(props.var, \"rgba(\"+c.rgb.r+\", \"+c.rgb.g+\", \"+c.rgb.b+\", \"+c.rgb.a+\")\")\r\n    }\r\n    return(\r\n        <div>\r\n            <p>{props.var}</p>\r\n            <div className=\"swatch\" onClick={handleClick}>\r\n                <div className={props.var} />\r\n            </div>\r\n            {displayColorPicker ? \r\n            <div className=\"popover\">\r\n                <div className=\"cover\" onClick={handleClose}/>\r\n                <SwatchesPicker colors={getColors()} onChange={handleChange} />\r\n            </div> : null }\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","export type weblink = {\r\n\turl: string,\r\n\ticon: string,\r\n}\r\n\r\nexport const weblinks:weblink[] = [\r\n\t{\r\n\t\turl: \"https://github.com\",\r\n\t\ticon: \"faGithubAlt\",\r\n\t},\r\n\t{\r\n\t\turl: \"https://reddit.com\",\r\n\t\ticon: \"faRedditAlien\",\r\n\t},\r\n\t{\r\n\t\turl: \"https://gitlab.com\",\r\n\t\ticon: \"faGitlab\",\r\n\t},\r\n\t{\r\n\t\turl: \"https://www.wallpaperflare.com/park-junkyu-women-cyborg-futuristic-cyberpunk-black-hair-wallpaper-wekdq\",\r\n\t\ticon: \"faImage\",\r\n\t},\r\n\t{\r\n\t\turl: \"https://www.youtube.com/channel/UCtQqZ6EhvprvC0H2tLN2EcA\",\r\n\t\ticon: \"faYoutube\",\r\n\t},\r\n\t{\r\n\t\turl: \"\",\r\n\t\ticon: \"faGitkraken\",\r\n\t},\r\n]\r\nexport const welcome:string = \"お帰りなさい\"\r\n\r\nexport type searchEngine = {\r\n\tlabel: string,\r\n\turl: string,\r\n}\r\n\r\nexport const searchEngines:searchEngine[] = [\r\n\t{\r\n\t\tlabel: \"Google\",\r\n\t\turl: \"google.com/search\",\r\n\t},\r\n\t{\r\n\t\tlabel: \"DuckDuckGo\",\r\n\t\turl: \"duckduckgo.com/\",\r\n\t},\r\n\t{\r\n\t\tlabel: \"Qwant\",\r\n\t\turl: \"qwant.com/\",\r\n\t},\r\n]","import React, {useState, useEffect} from 'react';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport {toastAction} from \"../Toastify/Toastify\"\r\nimport Colorpicker from \"./Colorpicker\"\r\nimport \"../_styles/settings.css\"\r\n\r\nimport { searchEngines } from \"../_data/data\"\r\n\r\ntype props = {\r\n    handleColorChange: (key: string, color: string) => void,\r\n}\r\n\r\nexport function Settings(props:props){\r\n    const [showSettings, setShowSettings] = useState(false)\r\n    const [currSearchEngine, setCurrSearchEngine] = useState(searchEngines[0].url)\r\n\r\n    useEffect(()=>{\r\n        let lsEngine = localStorage.getItem(\"search-engine\")\r\n        if (lsEngine !== null) {\r\n            setCurrSearchEngine(lsEngine)\r\n        }\r\n    }, [])\r\n\r\n    let handleEngineChange = (url:string) => {\r\n        setCurrSearchEngine(url)\r\n        localStorage.setItem(\"search-engine\", url)\r\n        toastAction(\"Changed searchengine to \"+url)\r\n    }\r\n    \r\n    let engines:JSX.Element[] = []\r\n    searchEngines.forEach(engine => {\r\n        engines.push(\r\n            <div>\r\n                <label>\r\n                    <input \r\n                        type=\"radio\" \r\n                        value={engine.url} \r\n                        checked={currSearchEngine === engine.url} \r\n                        onChange={(e)=>handleEngineChange(e.currentTarget.value)} \r\n                    />\r\n                    {engine.label}\r\n                </label>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return(\r\n        <>\r\n            <FontAwesomeIcon icon={fas[\"faPaintRoller\"]} onClick={()=>setShowSettings(!showSettings)}/>\r\n            { (showSettings) \r\n            ? <div>\r\n                <FontAwesomeIcon icon={fas[\"faTimes\"]} onClick={()=>setShowSettings(!showSettings)}/>\r\n                <div className=\"settings-cover\" onClick={()=>setShowSettings(!showSettings)}/>\r\n                <div className=\"settings-section\">\r\n                    <Colorpicker\r\n                        handleColorChange={props.handleColorChange}\r\n                        var=\"bg-color\"\r\n                        />\r\n                    <Colorpicker\r\n                        handleColorChange={props.handleColorChange}\r\n                        var=\"default-color\"\r\n                        />\r\n                    <Colorpicker\r\n                        handleColorChange={props.handleColorChange}\r\n                        var=\"accent-color\"\r\n                        />\r\n                    <Colorpicker\r\n                        handleColorChange={props.handleColorChange}\r\n                        var=\"accent-color2\"\r\n                        />\r\n                </div>\r\n                <div className=\"settings-section\">\r\n                    {engines}\r\n                </div>\r\n            </div>\r\n            : \"\"\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\n\r\nimport \"../_styles/dockbar.css\"\r\n\r\nimport { weblinks } from '../_data/data'\r\n\r\nexport function Settings(){\r\n    let icons:JSX.Element[] = []\r\n    weblinks.forEach(weblink => {\r\n        icons.push(\r\n            <a href={weblink.url}>\r\n                <FontAwesomeIcon icon={\r\n                    (fas[weblink.icon] !== undefined)\r\n                    ? fas[weblink.icon] \r\n                    : fab[weblink.icon]\r\n                } />\r\n            </a>\r\n        )\r\n    });\r\n\r\n\r\n    return(\r\n        <div className=\"dockbar\">\r\n            {icons}\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react';\r\nimport '../_styles/searchbar.css';\r\n\r\nexport function SearchBar() : JSX.Element {\r\n    let engine = localStorage.getItem(\"search-engine\")\r\n    if (engine === null) {\r\n        engine = \"google.com/search\"\r\n    }\r\n\r\n    var inputRef:any;\r\n    function redirectToSearch() {\r\n        let value = encodeURIComponent(inputRef.value)\r\n        window.location.replace(\"https://\"+engine+\"?q=\"+value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchbar\">\r\n            <div>\r\n                <input \r\n                    placeholder=\"Always stay clean!\" \r\n                    className=\"input\" \r\n                    type=\"input\"\r\n                    ref = {(ref) => inputRef = ref} \r\n                    onKeyPress={(e) => {if (e.which === 13) redirectToSearch()}}\r\n                    autoFocus={true}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Toastify, toastAction} from \"./Toastify/Toastify\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './_styles/animations.css';\r\nimport './_styles/variables.css';\r\nimport './_styles/main.css';\r\n\r\nimport Pic from \"./_data/pic.png\"\r\nimport Settings from \"./Settings/Settings\"\r\nimport Dockbar from \"./Dockbar/Dockbar\"\r\nimport Searchbar from \"./Searchbar/Searchbar\"\r\nimport { welcome } from './_data/data'\r\n\r\ntype colors = {\r\n\t[key:string]:string\r\n\t'bg-color':string,\r\n\t'default-color':string,\r\n\t'accent-color':string,\r\n\t'accent-color2':string,\r\n}\r\nconst defaultColors:colors = {\r\n\t'bg-color': \"rgba(46,46,46,255)\",\r\n\t'default-color': \"rgba(230,230,230,255)\",\r\n\t'accent-color': \"rgba(50,200,150,.3)\",\r\n\t'accent-color2': \"rgba(200, 50, 50, 0.3)\",\r\n}\r\n\r\nfunction App() {\r\n\tconst [time, setTime] = useState(new Date())\r\n\tlet tick = () => {\r\n\t\tsetTime(new Date())\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tsetInterval(\r\n\t\t\t() => tick(),\r\n\t\t\t1000\r\n\t\t  );\r\n\t}, [])\r\n\r\n\t//Prepare colors\r\n\tlet root = document.documentElement;\r\n\tObject.keys(defaultColors).forEach(key => {\r\n\t\tlet c = localStorage.getItem(key)\r\n\t\tif (c) {\r\n\t\t\troot.style.setProperty(\"--\"+key, c)\r\n\t\t}\r\n\t});\r\n\r\n\tlet handleColorChange = (key:string, color:string) => {\r\n\t\troot.style.setProperty(\"--\"+key, color)\r\n\t\tlocalStorage.setItem(key, color)\r\n\t\ttoastAction(key+' changed to '+color)\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Toastify />\r\n\r\n\t\t\t<div className=\"settings\">\r\n\t\t\t\t<Settings handleColorChange={handleColorChange} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"main-wrapper\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"pic-cover\" />\r\n\t\t\t\t\t<img src={Pic} alt=\"\" onClick={()=>toastAction(\"test\")}/>\r\n\t\t\t\t\t<div className=\"text\">\r\n\t\t\t\t\t\t<h2>{welcome}</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Dockbar />\r\n\t\t\t\t\t<div className=\"time\">\r\n\t\t\t\t\t\t<h2>{time.toLocaleTimeString(\"de-De\").slice(0, 5)}</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Searchbar />\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/pic.ba1342f4.png\";"],"sourceRoot":""}